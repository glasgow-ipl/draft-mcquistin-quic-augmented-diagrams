<?xml version='1.0' encoding='US-ASCII'?>
<rfc version='3' ipr='trust200902' submissionType='IETF' docName='draft-mcquistin-quic-augmented-diagrams-00' category='exp'>
    <front>
        <title abbrev='QUIC Augmented Packet Diagrams'>
            Describing QUIC's Protocol Data Units with Augmented Packet Header Diagrams
        </title>
        <seriesInfo name='Internet-Draft' value='draft-mcquistin-quic-augmented-diagrams-00' status="experimental" />

        <author fullname='Stephen McQuistin' initials='S.' surname='McQuistin'>
            <organization>University of Glasgow</organization>
            <address>
                <postal>
                    <street>School of Computing Science</street>
                    <city>Glasgow</city>
                    <code>G12 8QQ</code>
                    <country>UK</country>
                </postal>
                <email>sm@smcquistin.uk</email>
            </address>
        </author>

        <author fullname='Vivian Band' initials='V.' surname='Band'>
            <organization>University of Glasgow</organization>
            <address>
                <postal>
                    <street>School of Computing Science</street>
                    <city>Glasgow</city>
                    <code>G12 8QQ</code>
                    <country>UK</country>
                </postal>
                <email>vivianband0@gmail.com</email>
            </address>
        </author>

        <author fullname='Dejice Jacob' initials='D.' surname='Jacob'>
            <organization>University of Glasgow</organization>
            <address>
                <postal>
                    <street>School of Computing Science</street>
                    <city>Glasgow</city>
                    <code>G12 8QQ</code>
                    <country>UK</country>
                </postal>
                <email>d.jacob.1@research.gla.ac.uk</email>
            </address>
        </author>

        <author fullname='Colin Perkins' initials='C. S.' surname='Perkins'>
            <organization>University of Glasgow</organization>
            <address>
                <postal>
                    <street>School of Computing Science</street>
                    <city>Glasgow</city>
                    <code>G12 8QQ</code>
                    <country>UK</country>
                </postal>
                <email>csp@csperkins.org</email>
            </address>
        </author>

        <?date year='2020' month='March' day='18'/?>

        <abstract>
            <t>
              This document describes the core transport protocol data units
              used in the QUIC protocol using a machine-readable augmented
              packet header diagram format. It is intended as an example of
              the packet header diagram language, and not as a contribution
              to the development of the QUIC protocol.
            </t>
        </abstract>
    </front>

    <middle>
        <section anchor='intro'>
            <name>Introduction</name>
            <t>
              The augmented packet header diagram format
              <xref target="AUGMENTED-DIAGRAMS" /> enables documents to
              specify the syntax of protocol data units in a way that
              enables support for automated parser generation, while
              maintaining human readability.
            </t>
            <t>
              To demonstrate how this approach can be applied, and the
              value that it can provide, this document describes QUIC
              <xref target="QUIC-TRANSPORT" /> using the augment packet
              header diagram format.
            </t>
            <t>
              This document is not an exhaustive description of the QUIC
              protocol. It contains only those elements necessary to
              demonstrate the augmented packet header diagram format.
            </t>
        </section>

        <section anchor='longheader'>
            <name>Long Header Packets</name>
            <t>A long header packet is formatted as follows:</t>
            <artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+
   |1|1| T |   X   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Version                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    DCID Len   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                   Destination Connection ID                 ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    SCID Len   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Source Connection ID                   ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </artwork>
            <t>
                where:
            </t>
            <dl>
                <dt>
                    Header Form (HF): 1 bit; HF == 1.
                </dt>
                <dd>
                    The most significant bit (0x80) of byte 0 (the first byte) is set to 1 for long headers.
                </dd>
                <dt>
                    Fixed Bit (FB): 1 bit; FB == 1.
                </dt>
                <dd>
                    The next bit (0x40) of byte 0 is set to 1. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded.
                </dd>
                <dt>
                    Long Packet Type (T): 2 bits.
                </dt>
                <dd>
                    The next two bits (those with a mask of 0x30) of byte 0 contain a packet type.
                </dd>
                <dt>
                    Type-Specific Bits (X): 4 bits.
                </dt>
                <dd>
                    The lower four bits (those with a mask of 0x0f) of byte 0 are type-specific.
                </dd>
                <dt>
                    Version: 32 bits.
                </dt>
                <dd>
                    This field indicates which version of QUIC is in use and determines how the rest of the protocol fields are interpreted.
                </dd>
                <dt>
                    DCID Len (DLen): 1 byte; DLen &lt;= 20.
                </dt>
                <dd>
                    This field contains the length, in bytes, of the Destination Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. Servers SHOULD be able to read longer connection IDs from other QUIC versions in order to properly form a version negotiation packet.
                </dd>
                <dt>
                    Destination Connection ID: DLen bytes.
                </dt>
                <dd>
                    The Destination Connection ID field is between 0 and 20 bytes in length.
                </dd>
                <dt>
                    SCID Len (SLen): 1 byte; SLen &lt;= 20.
                </dt>
                <dd>
                    This field contains the length, in bytes, of the Source Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20 bytes. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. Servers SHOULD be able to read longer connection IDs from other QUIC versions in order to properly form a version negotiation packet.
                </dd>
                <dt>
                    Source Connection ID: SLen bytes.
                </dt>
                <dd>
                    The Source Connection ID field is between 0 and 20 bytes in length.
                </dd>
            </dl>
            <section anchor='longheader-version_negotiation'>
               <name>Version Negotiation Packet</name>
               <t>A Version is formatted as follows:</t>
               <artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     Version identifier                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
               </artwork>
               <t>
                  where:
               </t>
               <dl>
                  <dt>
                     Version identifier: 32 bits.
                  </dt>
                  <dd>
                     32-bit version identifier.
                  </dd>
               </dl>
               <t>A Version Negotiation packet is formatted as follows:</t>
               <artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               :
   :                          Long Header                          :
   :                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      [Supported Versions]                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
               </artwork>
               <t>
                  where:
               </t>
               <dl>
                  <dt>
                     Header Form (HF): 1 bit; HF == 1.
                  </dt>
                  <dd>
                     The most significant bit (0x80) of byte 0 (the first byte) is set to 1 for long headers.
                  </dd>
                  <dt>
                     Fixed Bit (FB): 1 bit; FB == 1.
                  </dt>
                  <dd>
                     The next bit (0x40) of byte 0 is set to 1. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded.
                  </dd>
                  <dt>
                     Unused (T): 6 bits.
                  </dt>
                  <dd>
                     These bits are unused in the version negotiation packet.
                  </dd>
                  <dt>
                     Version: 32 bits; Version == 0.
                  </dt>
                  <dd>
                     The Version field of a Version Negotiation packet MUST be set to 0x0000000.
                  </dd>
                  <dt>
                      DCID Len (DLen): 1 byte.
                  </dt>
                  <dd>
                     This field is as previously define. However, as future versions of QUIC may support Connection IDs larger than the version 1 limit, Version Negotiation packets could carry Connection IDs that are longer than 20 bytes.
                  </dd>
                  <dt>
                     Destination Connection ID: DLen bytes.
                  </dt>
                  <dd>
                     The Destination Connection ID field is between 0 and 2^8-1 bytes in length.
                  </dd>
                  <dt>
                     SCID Len (SLen): 1 byte.
                  </dt>
                  <dd>
                     This field is as previously define. However, as future versions of QUIC may support Connection IDs larger than the version 1 limit, Version Negotiation packets could carry Connection IDs that are longer than 20 bytes.
                  </dd>
                  <dt>
                     Source Connection ID: SLen bytes.
                  </dt>
                  <dd>
                     The Source Connection ID field is between 0 and 2^8-1 bytes in length.
                  </dd>
                  <dt>
                     Supported Versions: * Version.
                  </dt>
                  <dd>
                     The remainder of the Version Negotiation packet is a list of 32-bit versions which the server supports.
                  </dd>
               </dl>
            </section>
            <section anchor='longheader-initial_packet'>
               <name>Initial Packet</name>
               <t>A Variable-Length Integer Encoding is formatted as follows:</t>
               <artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Len|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Value                           ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
               </artwork>
               <t>
                  where:
               </t>
               <dl>
                  <dt>
                     Len: 2 bits.
                  </dt>
                  <dd>
                     The base 2 logarithm of the integer encoding length in bytes.
                  </dd>
                  <dt>
                     Value: ((2^Len)*8)-2 bits.
                  </dt>
                  <dd>
                     The integer value encoded in network byte order.
                  </dd>
               </dl>
               <t>An Initial packet is formatted as follows:</t>
               <artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               :
   :                          Long Header                          :
   :                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          Token Length                       ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Token                           ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Length                          ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          Packet Number                      ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Payload                         ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
               </artwork>
               <t>
                  where:
               </t>
               <dl>
                  <dt>
                     Header Form (HF): 1 bit; HF == 1.
                  </dt>
                  <dd>
                     The most significant bit (0x80) of byte 0 (the first byte) is set to 1 for long headers.
                  </dd>
                  <dt>
                     Fixed Bit (FB): 1 bit; FB == 1.
                  </dt>
                  <dd>
                     The next bit (0x40) of byte 0 is set to 1. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded.
                  </dd>
                  <dt>
                     Long Packet Type (T): 2 bits; T == 0.
                  </dt>
                  <dd>
                     An Initial packet uses long headers with a type value of 0x0.
                  </dd>
                  <dt>
                     Reserved Bits (R): 2 bits.
                  </dt>
                  <dd>
                     Two bits (those with a mask of 0x0c) of byte 0 are reserved across multiple packet types. These bits are protected using header protection.
                  </dd>
                  <dt>
                     Packet Length (P): 2 bits.
                  </dt>
                  <dd>
                     In packet types which contain a Packet Number field, the least significant two bits (those with a mask of 0x03) of byte 0 contain the length of the packet number, encoded as an unsigned, two-bit integer that is one less than the length of the packet number field in bytes.
                  </dd>
                  <dt>
                     Version: 32 bits.
                  </dt>
                  <dd>
                     This field indicates which version of QUIC is in use.
                  </dd>
                  <dt>
                     DCID Len (DLen): 1 byte; DLen &lt;= 20.
                  </dt>
                  <dd>
                     This field contains the length, in bytes, of the Destination Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. Servers SHOULD be able to read longer connection IDs from other QUIC versions in order to properly form a version negotiation packet.
                  </dd>
                  <dt>
                     Destination Connection ID: DLen bytes.
                  </dt>
                  <dd>
                     The Destination Connection ID field is between 0 and 20 bytes in length.
                  </dd>
                  <dt>
                     SCID Len (SLen): 1 byte; SLen &lt;= 20.
                  </dt>
                  <dd>
                      This field contains the length, in bytes, of the Source Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20 bytes. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. Servers SHOULD be able to read longer connection IDs from other QUIC versions in order to properly form a version negotiation packet.
                  </dd>
                  <dt>
                     Source Connection ID: SLen bytes.
                  </dt>
                  <dd>
                     The Source Connection ID field is between 0 and 20 bytes in length.
                  </dd>
                  <dt>
                     Token Length (TL): 1 * Variable-Length Integer Encoding.
                  </dt>
                  <dd>
                     A variable-length integer specifying the length of the Token field, in bytes.
                  </dd>
                  <dt>
                     Token: TL.Value bytes; present only when TL.Value &gt; 0.
                  </dt>
                  <dd>
                     The value of the token that was previously provided in a Retry packet or NEW_TOKEN frame.
                  </dd>
                  <dt>
                     Length: 1 * Variable-Length Integer Encoding.
                  </dt>
                  <dd>
                     The length of the remainder of the packet (that is, the Packet Number and Payload fields) in bytes, encoded as a variable-length integer.
                  </dd>
                  <dt>
                     Packet Number: P+1 bytes.
                  </dt>
                  <dd>
                     The packet number field.
                  </dd>
                  <dt>
                     Payload: (Length.Value-(P+1)) bytes.
                  </dt>
                  <dd>
                     The payload field.
                  </dd>
               </dl>
            </section>
            <section anchor='longheader-0tt_packet'>
               <name>0-RTT Packet</name>
               <t>A 0-RTT packet is formatted as follows:</t>
               <artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               :
   :                          Long Header                          :
   :                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Length                          ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          Packet Number                      ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Payload                         ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
               </artwork>
               <t>
                  where:
               </t>
               <dl>
                  <dt>
                     Header Form (HF): 1 bit; HF == 1.
                  </dt>
                  <dd>
                     The most significant bit (0x80) of byte 0 (the first byte) is set to 1 for long headers.
                  </dd>
                  <dt>
                     Fixed Bit (FB): 1 bit; FB == 1.
                  </dt>
                  <dd>
                     The next bit (0x40) of byte 0 is set to 1. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded.
                  </dd>
                  <dt>
                     Long Packet Type (T): 2 bits; T == 1.
                  </dt>
                  <dd>
                     A 0-RTT packet uses long headers with a type value of 0x1.
                  </dd>
                  <dt>
                     Reserved Bits (R): 2 bits.
                  </dt>
                  <dd>
                     Two bits (those with a mask of 0x0c) of byte 0 are reserved across multiple packet types. These bits are protected using header protection.
                  </dd>
                  <dt>
                     Packet Length (P): 2 bits.
                  </dt>
                  <dd>
                     In packet types which contain a Packet Number field, the least significant two bits (those with a mask of 0x03) of byte 0 contain the length of the packet number, encoded as an unsigned, two-bit integer that is one less than the length of the packet number field in bytes.
                  </dd>
                  <dt>
                     Version: 32 bits.
                  </dt>
                  <dd>
                     This field indicates which version of QUIC is in use.
                  </dd>
                  <dt>
                     DCID Len (DLen): 1 byte; DLen &lt;= 20.
                  </dt>
                  <dd>
                     This field contains the length, in bytes, of the Destination Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. Servers SHOULD be able to read longer connection IDs from other QUIC versions in order to properly form a version negotiation packet.
                  </dd>
                  <dt>
                     Destination Connection ID: DLen bytes.
                  </dt>
                  <dd>
                     The Destination Connection ID field is between 0 and 20 bytes in length.
                  </dd>
                  <dt>
                     SCID Len (SLen): 1 byte; SLen &lt;= 20.
                  </dt>
                  <dd>
                      This field contains the length, in bytes, of the Source Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20 bytes. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. Servers SHOULD be able to read longer connection IDs from other QUIC versions in order to properly form a version negotiation packet.
                  </dd>
                  <dt>
                     Source Connection ID: SLen bytes.
                  </dt>
                  <dd>
                     The Source Connection ID field is between 0 and 20 bytes in length.
                  </dd>
                  <dt>
                     Length: 1 * Variable-Length Integer Encoding.
                  </dt>
                  <dd>
                     The length of the remainder of the packet (that is, the Packet Number and Payload fields) in bytes, encoded as a variable-length integer.
                  </dd>
                  <dt>
                     Packet Number: P+1 bytes.
                  </dt>
                  <dd>
                     The packet number field.
                  </dd>
                  <dt>
                     Payload: (Length.Value-(P+1)) bytes.
                  </dt>
                  <dd>
                     The payload field.
                  </dd>
               </dl>
            </section>
            <section anchor='longheader-handshake_packet'>
               <name>Handshake Packet</name>
               <t>A Handshake packet is formatted as follows:</t>
               <artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               :
   :                          Long Header                          :
   :                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Length                          ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          Packet Number                      ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                             Payload                         ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
               </artwork>
               <t>
                  where:
               </t>
               <dl>
                  <dt>
                     Header Form (HF): 1 bit; HF == 1.
                  </dt>
                  <dd>
                     The most significant bit (0x80) of byte 0 (the first byte) is set to 1 for long headers.
                  </dd>
                  <dt>
                     Fixed Bit (FB): 1 bit; FB == 1.
                  </dt>
                  <dd>
                     The next bit (0x40) of byte 0 is set to 1. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded.
                  </dd>
                  <dt>
                     Long Packet Type (T): 2 bits; T == 2.
                  </dt>
                  <dd>
                     A Handshake packet uses long headers with a type value of 0x2.
                  </dd>
                  <dt>
                     Reserved Bits (R): 2 bits.
                  </dt>
                  <dd>
                     Two bits (those with a mask of 0x0c) of byte 0 are reserved across multiple packet types. These bits are protected using header protection.
                  </dd>
                  <dt>
                     Packet Length (P): 2 bits.
                  </dt>
                  <dd>
                     In packet types which contain a Packet Number field, the least significant two bits (those with a mask of 0x03) of byte 0 contain the length of the packet number, encoded as an unsigned, two-bit integer that is one less than the length of the packet number field in bytes.
                  </dd>
                  <dt>
                     Version: 32 bits.
                  </dt>
                  <dd>
                     This field indicates which version of QUIC is in use.
                  </dd>
                  <dt>
                     DCID Len (DLen): 1 byte; DLen &lt;= 20.
                  </dt>
                  <dd>
                     This field contains the length, in bytes, of the Destination Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. Servers SHOULD be able to read longer connection IDs from other QUIC versions in order to properly form a version negotiation packet.
                  </dd>
                  <dt>
                     Destination Connection ID: DLen bytes.
                  </dt>
                  <dd>
                     The Destination Connection ID field is between 0 and 20 bytes in length.
                  </dd>
                  <dt>
                     SCID Len (SLen): 1 byte; SLen &lt;= 20.
                  </dt>
                  <dd>
                      This field contains the length, in bytes, of the Source Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer. In QUIC version 1, this value MUST NOT exceed 20 bytes. Endpoints that receive a version 1 long header with a value larger than 20 MUST drop the packet. Servers SHOULD be able to read longer connection IDs from other QUIC versions in order to properly form a version negotiation packet.
                  </dd>
                  <dt>
                     Source Connection ID: SLen bytes.
                  </dt>
                  <dd>
                     The Source Connection ID field is between 0 and 20 bytes in length.
                  </dd>
                  <dt>
                     Length: 1 * Variable-Length Integer Encoding.
                  </dt>
                  <dd>
                     The length of the remainder of the packet (that is, the Packet Number and Payload fields) in bytes, encoded as a variable-length integer.
                  </dd>
                  <dt>
                     Packet Number: P+1 bytes.
                  </dt>
                  <dd>
                     The packet number field.
                  </dd>
                  <dt>
                     Payload: (Length.Value-(P+1)) bytes.
                  </dt>
                  <dd>
                     The payload field.
                  </dd>
               </dl>
            </section>
        </section>

        <section anchor='IANA'>
            <name>IANA Considerations</name>
            <t>
                This document contains no actions for IANA.
            </t>
        </section>

        <section anchor='security'>
            <name>Security Considerations</name>
        </section>

        <section anchor='Acknowledgements'>
            <name>Acknowledgements</name>
            <t>
                This work has received funding from the UK Engineering and Physical
                Sciences Research Council under grant EP/R04144X/1.
            </t>
        </section>
    </middle>

    <back>
        <references>
            <name>Informative References</name>
            <reference anchor="QUIC-TRANSPORT" target="http://www.ietf.org/internet-drafts/draft-ietf-quic-transport-27.txt">
                <front>
                    <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>

                    <author initials='J' surname='Iyengar' fullname='Jana Iyengar'><organization /></author>
                    <author initials='M' surname='Thomson' fullname='Martin Thomson'><organization /></author>

                    <date month='February' day='21' year='2020' />
                </front>

                <seriesInfo name='Internet-Draft' value='draft-ietf-quic-transport-27' />
            </reference>
            <reference anchor="AUGMENTED-DIAGRAMS" target="http://www.ietf.org/internet-drafts/draft-mcquistin-augmented-ascii-diagrams-03.txt">
                <front>
                    <title>Describing Protocol Data Units with Augmented Packet Header Diagrams</title>

                    <author initials='S' surname='McQuistin' fullname='Stephen McQuistin'><organization /></author>
                    <author initials='V' surname='Band' fullname='Vivian Band'><organization /></author>
                    <author initials='D' surname='Jacob' fullname='Dejice Jacob'><organization /></author>
                    <author initials='C. S.' surname='Perkins' fullname='Colin Perkins'><organization /></author>

                    <date month='March' day='9' year='2020' />
                </front>

                <seriesInfo name='Internet-Draft' value='draft-mcquistin-augmented-ascii-diagrams-03' />
            </reference>
        </references>

        <section anchor='source'>
            <name>Source code repository</name>
            <t>
                The source for this draft is available from
                <eref target="https://github.com/glasgow-ipl/draft-mcquistin-quic-augmented-diagrams" />.
            </t>
            <t>
                The source code for tooling that can be used to parse this document is available
                from <eref target="https://github.com/glasgow-ipl/ips-protodesc-code" />.
            </t>
        </section>
    </back>
 </rfc>
